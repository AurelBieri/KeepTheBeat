@page "/main"
@using Microsoft.AspNetCore.Components.Web
@inject NavigationManager Navigation
@using Keep_The_Beat.Classes;
@using Database.Services;
@inject IJSRuntime JSRuntime
@inject SongService SongService
@inject PlaylistService PlaylistService
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<h1 class="text-center my-4">Keep The Beat</h1>

<div class="container-fluid">
    <div class="row">
        <!-- Sidebar Menu -->
        <div class="col-md-3 col-lg-2 bg-light border-right">
            <div class="d-flex flex-column p-3">
                <h4>Menu</h4>
                <button class="btn btn-primary my-2" @onclick="UploadSong">Song Hochladen</button>
                <button class="btn btn-secondary my-2" @onclick="ShowCreatePlaylistModal">Neue Playlist Erstellen</button>
            </div>
        </div>

        <!-- Main Content -->
        <div class="col-md-9 col-lg-10">
            <div class="form-group position-relative">
                <input class="form-control" value="@searchQuery" @oninput="UpdateSearchQuery" placeholder="Nach Songs suchen..." />
                <div class="list-group position-absolute w-100" style="max-height: 200px; overflow-y: auto; z-index: 1000;"
                     hidden="@string.IsNullOrEmpty(searchQuery)">
                    @if (filteredSongs.Any())
                    {
                        @foreach (var song in filteredSongs)
                        {
                            <button type="button" class="list-group-item list-group-item-action" @onclick="() => PlaySong(song)">
                                @song._titel by @song._artist
                            </button>
                        }
                    }
                    else if (!string.IsNullOrEmpty(searchQuery))
                    {
                        <div class="list-group-item">
                            Keine Ergebnisse für: @searchQuery
                        </div>
                    }
                </div>
            </div>

            <!-- Playlists -->
            <div class="row mt-4">
                @foreach (Keep_The_Beat.Classes.Playlist playlist in playlists)
                {
                    <div class="col-sm-6 col-md-4 col-lg-3 mb-4">
                        <div class="card h-100">
                            <div class="card-body d-flex justify-content-center align-items-center">
                                @playlist._name
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<audio id="audioPlayer" controls style="display:none;"></audio>

<div class="fixed-bottom bg-dark text-white py-2 px-3 d-flex align-items-center">
    @if (currentSong != null)
    {
        <div class="flex-grow-1">
            <strong>@currentSong._titel</strong> by @currentSong._artist
        </div>
        <button class="btn btn-light btn-sm mx-1" @onclick="PauseSong">Pause</button>
        <button class="btn btn-light btn-sm mx-1" @onclick="ResumeSong">Play</button>
        <button class="btn btn-light btn-sm mx-1" @onclick="StopSong">Stop</button>
    }
</div>

<div class="modal" tabindex="-1" style="display: @(showCreatePlaylistModal ? "block" : "none")">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Neue Playlist Erstellen</h5>
                <button type="button" class="close" @onclick="CloseCreatePlaylistModal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="playlistName">Playlist Name</label>
                    <input type="text" class="form-control" id="playlistName" @bind="newPlaylistName" />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseCreatePlaylistModal">Close</button>
                <button type="button" class="btn btn-primary" @onclick="CreatePlaylist">Create</button>
            </div>
        </div>
    </div>
</div>

@code {
    private string searchQuery = string.Empty;
    private List<Song> allSongs = new();
    private List<Song> filteredSongs = new();
    private List<Keep_The_Beat.Classes.Playlist> playlists = new();
    private Song currentSong;
    private bool showCreatePlaylistModal = false;
    private string newPlaylistName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        allSongs = await SongService.GetSongs();
        playlists = await PlaylistService.GetPlaylists(await localStorage.GetItemAsync<User>("user"));
        filteredSongs = allSongs;
    }

    private void UpdateSearchQuery(ChangeEventArgs e)
    {
        searchQuery = e.Value.ToString();
        SearchSong();
    }

    private void SearchSong()
    {
        if (!string.IsNullOrEmpty(searchQuery))
        {
            filteredSongs = allSongs.Where(song =>
                song._titel.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                song._artist.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)).ToList();
        }
        else
        {
            filteredSongs = allSongs;
        }
    }

    private async void PlaySong(Song song)
    {
        currentSong = song;
        searchQuery = string.Empty;
        filteredSongs = allSongs;
        var base64 = Convert.ToBase64String(song.FileContent);
        var audioSrc = $"data:audio/mp3;base64,{base64}";
        await JSRuntime.InvokeVoidAsync("playAudio", audioSrc);
    }

    private async void PauseSong()
    {
        await JSRuntime.InvokeVoidAsync("pauseAudio");
    }

    private async void ResumeSong()
    {
        await JSRuntime.InvokeVoidAsync("resumeAudio");
    }

    private async void StopSong()
    {
        currentSong = null;
        await JSRuntime.InvokeVoidAsync("stopAudio");
    }

    private void UploadSong()
    {
        Navigation.NavigateTo("/upload-song");
    }

    private void ShowCreatePlaylistModal()
    {
        showCreatePlaylistModal = true;
    }

    private async void CloseCreatePlaylistModal()
    {
        showCreatePlaylistModal = false;
        await InvokeAsync(StateHasChanged); // Force UI refresh
    }

    private async void CreatePlaylist()
    {
        if (!string.IsNullOrEmpty(newPlaylistName))
        {
            // Close the modal immediately
            showCreatePlaylistModal = false;
            await InvokeAsync(StateHasChanged); // Ensure the state is updated immediately

            User user = await localStorage.GetItemAsync<User>("user");
            var newPlaylist = new Keep_The_Beat.Classes.Playlist(new List<Song>(), newPlaylistName, 0, 0, user);

            await PlaylistService.AddPlaylist(newPlaylist);
            playlists = await PlaylistService.GetPlaylists(user); // Refresh playlists

            newPlaylistName = string.Empty;
            await InvokeAsync(StateHasChanged); // Force UI refresh after adding the playlist
        }
    }
}

<style>
    .position-relative .list-group {
        top: calc(100% + 0.25rem);
    }

    .modal {
        display: block;
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgb(0,0,0);
        background-color: rgba(0,0,0,0.4);
        padding-top: 60px;
    }

    .modal-dialog {
        position: relative;
        margin: auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
        max-width: 600px;
    }

    .modal-content {
        background-color: #fefefe;
        margin: 5% auto 15% auto;
        border: 1px solid #888;
        width: 100%;
    }
</style>
