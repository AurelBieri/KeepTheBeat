@page "/main"
@using KeepTheBeat.Classes;
@using Microsoft.AspNetCore.Components.Web
@inject NavigationManager Navigation
@using Keep_The_Beat.Classes;
@using KeepTheBeat.Interfaces;
@using Database.Services;
@inject IJSRuntime JSRuntime
@inject ISongService SongService
@inject IPlaylistService PlaylistService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject EmailService EmailService
@inject AudioService AudioService

<h1 class="text-center my-4">Keep The Beat</h1>

<div class="container-fluid">
    <div class="row">
        <!-- Sidebar Menu -->
        <div class="col-md-3 col-lg-2 bg-light border-right">
            <div class="d-flex flex-column p-3">
                <h4>Menu</h4>
                <button class="btn btn-primary my-2" @onclick="UploadSong">Song Hochladen</button>
                <button class="btn btn-secondary my-2" @onclick="ShowCreatePlaylistModal">Neue Playlist Erstellen</button>
                <button class="btn btn-info my-2" @onclick="ShowFeedbackModal">Feedback</button>
                <button class="btn btn-danger my-2" @onclick="Logout">Logout</button>
            </div>
        </div>

        <!-- Main Content -->
        <div class="col-md-9 col-lg-10">
            <div class="form-group position-relative">
                <input class="form-control" value="@searchQuery" @oninput="UpdateSearchQuery" placeholder="Nach Songs suchen..." />
                <div class="list-group position-absolute w-100" style="max-height: 200px; overflow-y: auto; z-index: 1;" hidden="@string.IsNullOrEmpty(searchQuery)">
                    @if (filteredSongs.Any())
                    {
                        @foreach (var song in filteredSongs)
                        {
                            <div class="list-group-item d-flex justify-content-between align-items-center">
                                <div>
                                    @song._titel by @song._artist
                                </div>
                                <div>
                                    <button class="btn btn-primary btn-sm mx-1" @onclick="() => PlaySong(song)">Play</button>
                                    <button class="btn btn-secondary btn-sm mx-1" @onclick="() => ShowAddToPlaylistModal(song)">Add to Playlist</button>
                                </div>
                            </div>
                        }
                    }
                    else if (!string.IsNullOrEmpty(searchQuery))
                    {
                        <div class="list-group-item">
                            Keine Ergebnisse für: @searchQuery
                        </div>
                    }
                </div>
            </div>

            <!-- Playlists -->
            <div class="playlist-section mt-4 p-3 bg-light rounded">
                <h3 class="text-center">Your Playlists</h3>
                <div class="row mt-3">
                    @foreach (Keep_The_Beat.Classes.Playlist playlist in playlists)
                    {
                        <div class="col-sm-6 col-md-4 col-lg-3 mb-4">
                            <div class="card playlist-card h-100" @onclick="() => OpenPlaylist(playlist)">
                                <div class="card-body d-flex justify-content-center align-items-center">
                                    @playlist._name
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<audio id="audioPlayer" controls style="display:none;"></audio>

<div class="fixed-bottom bg-dark text-white py-2 px-3 d-flex justify-content-center align-items-center">
    @if (currentSong != null)
    {
        <div class="text-center mx-3">
            <strong>@currentSong._titel</strong> by @currentSong._artist
        </div>
        <button class="btn btn-light btn-circle mx-1" @onclick="TogglePlayPause">
            @if (isPlaying)
            {
                <i class="fas fa-pause fa-lg"></i>
            }
            else
            {
                <i class="fas fa-play fa-lg"></i>
            }
        </button>
        <button class="btn btn-light btn-circle mx-1" @onclick="StopSong">
            <i class="fas fa-stop fa-lg"></i>
        </button>
    }
</div>

<!-- Create Playlist Modal -->
<div class="modal" tabindex="-1" style="display: @(showCreatePlaylistModal ? "block" : "none"); z-index: 1050;">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Neue Playlist Erstellen</h5>
                <button type="button" class="close" @onclick="CloseCreatePlaylistModal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="playlistName">Playlist Name</label>
                    <input type="text" class="form-control" id="playlistName" @bind="newPlaylistName" />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseCreatePlaylistModal">Close</button>
                <button type="button" class="btn btn-primary" @onclick="CreatePlaylist">Create</button>
            </div>
        </div>
    </div>
</div>

<!-- Add to Playlist Modal -->
<div class="modal" tabindex="-1" style="display: @(showAddToPlaylistModal ? "block" : "none"); z-index: 1050;">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add to Playlist</h5>
                <button type="button" class="close" @onclick="CloseAddToPlaylistModal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="playlistSelect">Select Playlist</label>
                    <select class="form-control" id="playlistSelect" @bind="selectedPlaylistId">
                        <option value="">Select Playlist</option>
                        @foreach (var playlist in playlists)
                        {
                            <option value="@playlist.PlaylistId">@playlist._name</option>
                        }
                    </select>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseAddToPlaylistModal">Close</button>
                <button type="button" class="btn btn-primary" @onclick="AddSongToPlaylist">Add</button>
            </div>
        </div>
    </div>
</div>

<!-- Feedback Modal -->
<div class="modal" tabindex="-1" style="display: @(showFeedbackModal ? "block" : "none"); z-index: 1050;">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Feedback</h5>
                <button type="button" class="close" @onclick="CloseFeedbackModal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="feedbackText">Your Feedback</label>
                    <textarea class="form-control" id="feedbackText" @bind="feedbackText"></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseFeedbackModal">Close</button>
                <button type="button" class="btn btn-primary" @onclick="SendFeedback">Send</button>
            </div>
        </div>
    </div>
</div>

@code {
    private string searchQuery = string.Empty;
    private List<Song> allSongs = new();
    private List<Song> filteredSongs = new();
    private List<Keep_The_Beat.Classes.Playlist> playlists = new();
    private Song currentSong;
    private bool isPlaying = false;
    private bool showCreatePlaylistModal = false;
    private bool showAddToPlaylistModal = false;
    private bool showFeedbackModal = false;
    private string newPlaylistName = string.Empty;
    private Song songToAdd;
    private int selectedPlaylistId;
    private string feedbackText = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        allSongs = await SongService.GetSongs();
        playlists = await PlaylistService.GetPlaylists(await localStorage.GetItemAsync<User>("user"));
        filteredSongs = allSongs;
    }

    private void UpdateSearchQuery(ChangeEventArgs e)
    {
        searchQuery = e.Value.ToString();
        SearchSong();
    }

    private void SearchSong()
    {
        if (!string.IsNullOrEmpty(searchQuery))
        {
            filteredSongs = allSongs.Where(song =>
                song._titel.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                song._artist.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)).ToList();
        }
        else
        {
            filteredSongs = allSongs;
        }
    }

    private async void PlaySong(Song song)
    {
        currentSong = song;
        searchQuery = string.Empty;
        filteredSongs = allSongs;
        var base64 = Convert.ToBase64String(song.FileContent);
        var audioSrc = $"data:audio/mp3;base64,{base64}";
        await AudioService.PlayAudio(JSRuntime, audioSrc);
        isPlaying = true;
    }

    private async void TogglePlayPause()
    {
        if (isPlaying)
        {
            await AudioService.PauseAudio(JSRuntime);
        }
        else
        {
            await AudioService.ResumeAudio(JSRuntime);
        }
        isPlaying = !isPlaying;
    }

    private async void StopSong()
    {
        currentSong = null;
        await AudioService.StopAudio(JSRuntime);
        isPlaying = false;
    }

    private void UploadSong()
    {
        Navigation.NavigateTo("/upload-song");
    }

    private void ShowCreatePlaylistModal()
    {
        showCreatePlaylistModal = true;
    }

    private async void CloseCreatePlaylistModal()
    {
        showCreatePlaylistModal = false;
        await InvokeAsync(StateHasChanged); // Force UI refresh
    }

    private async void CreatePlaylist()
    {
        if (!string.IsNullOrEmpty(newPlaylistName))
        {
            // Close the modal immediately
            showCreatePlaylistModal = false;
            await InvokeAsync(StateHasChanged); // Ensure the state is updated immediately

            User user = await localStorage.GetItemAsync<User>("user");
            var newPlaylist = new Keep_The_Beat.Classes.Playlist(new List<Song>(), newPlaylistName, 0, 0, user);

            await PlaylistService.AddPlaylist(newPlaylist);
            playlists = await PlaylistService.GetPlaylists(user); // Refresh playlists

            newPlaylistName = string.Empty;
            await InvokeAsync(StateHasChanged); // Force UI refresh after adding the playlist
        }
    }

    private void OpenPlaylist(Keep_The_Beat.Classes.Playlist playlist)
    {
        Navigation.NavigateTo($"/playlist/{playlist.PlaylistId}");
    }

    private void ShowAddToPlaylistModal(Song song)
    {
        songToAdd = song;
        showAddToPlaylistModal = true;
    }

    private async void CloseAddToPlaylistModal()
    {
        showAddToPlaylistModal = false;
        await InvokeAsync(StateHasChanged);
    }

    private async void AddSongToPlaylist()
    {
        showAddToPlaylistModal = false;
        await InvokeAsync(StateHasChanged);

        User user = await localStorage.GetItemAsync<User>("user");
        await PlaylistService.AddSongToPlaylist(selectedPlaylistId, songToAdd);
        playlists = await PlaylistService.GetPlaylists(user);

        await InvokeAsync(StateHasChanged);
    }

    private void ShowFeedbackModal()
    {
        showFeedbackModal = true;
    }

    private async void CloseFeedbackModal()
    {
        showFeedbackModal = false;
        await InvokeAsync(StateHasChanged);
    }

    private async void SendFeedback()
    {
        showFeedbackModal = false;
        await InvokeAsync(StateHasChanged);
        //Don't use it yet it uses the a Email i set up. For security only i can allow the usage for the moment.

        /* if (!string.IsNullOrEmpty(feedbackText))
         {
             await EmailService.SendEmailAsync("User Feedback", feedbackText);
             feedbackText = string.Empty;
             showFeedbackModal = false;
             await InvokeAsync(StateHasChanged);
         }
         else
         {
             await JSRuntime.InvokeVoidAsync("alert", "Please enter feedback before sending.");
         }*/
    }

    private void Logout()
    {
        localStorage.RemoveItemAsync("user");
        Navigation.NavigateTo("/");
    }
}

<style>
    .btn-circle {
        border-radius: 50%;
        width: 60px;
        height: 60px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 24px;
    }

    .fixed-bottom {
        background-color: #343a40;
        padding: 10px 0;
    }

        .fixed-bottom .text-center {
            flex-grow: 1;
        }

    .position-relative .list-group {
        top: calc(100% + 0.25rem);
    }

    .modal {
        display: block;
        position: fixed;
        z-index: 1050;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgb(0, 0, 0);
        background-color: rgba(0, 0, 0, 0.4);
        padding-top: 60px;
    }

    .modal-dialog {
        position: relative;
        margin: auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
        max-width: 600px;
    }

    .modal-content {
        background-color: #fefefe;
        margin: 5% auto 15% auto;
        border: 1px solid #888;
        width: 100%;
    }

    .playlist-section {
        background-color: #f8f9fa;
        border-radius: 10px;
        padding: 20px;
    }

    .playlist-card {
        border-radius: 10px;
        background-color: #343a40;
        color: white;
        display: flex;
        justify-content: center;
        align-items: center;
        text-align: center;
        cursor: pointer;
    }
</style>
