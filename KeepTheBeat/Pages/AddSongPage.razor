@page "/upload-song"
@using NAudio.Wave
@using Keep_The_Beat.Classes;
@using KeepTheBeat.Interfaces;
@using KeepTheBeat.Database.Services;
@inject NavigationManager Navigation
@inject ISongService SongService

<div class="container mt-5">
    <div class="row">
        <div class="col-12">
            <button class="btn btn-outline-secondary mb-3" @onclick="BackToMain">
                <i class="fas fa-arrow-left"></i> Back
            </button>
            <h3>Upload a Song</h3>
            <EditForm Model="@song" OnValidSubmit="HandleValidSubmit" class="needs-validation" novalidate>
                <div class="form-group">
                    <InputFile OnChange="HandleFileSelected" accept=".mp3" class="form-control-file" />
                </div>
                <div class="form-group">
                    <label>Title:</label>
                    <InputText @bind-Value="song._titel" class="form-control" />
                </div>
                <div class="form-group">
                    <label>Artist:</label>
                    <InputText @bind-Value="song._artist" class="form-control" />
                </div>
                <div class="form-group">
                    <label>Album:</label>
                    <InputText @bind-Value="song._album" class="form-control" />
                </div>
                <div class="form-group form-check">
                    <InputCheckbox @bind-Value="song._isfavorite" class="form-check-input" id="favoriteCheck" />
                    <label class="form-check-label" for="favoriteCheck">Is Favorite</label>
                </div>
                <div class="form-group">
                    <label>Release Year:</label>
                    <InputNumber @bind-Value="song._releaseyear" class="form-control" />
                </div>
                <button type="submit" class="btn btn-primary">Upload</button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private Song song = new Song();

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            song.FileName = file.Name;
            using (var stream = file.OpenReadStream(10240000)) // Limit the size to 10 MB
            {
                MemoryStream ms = new MemoryStream();
                await stream.CopyToAsync(ms);
                song.FileContent = ms.ToArray();

                ms.Position = 0;

                try
                {
                    using (var mp3Reader = new Mp3FileReader(ms))
                    {
                        song._duration = (float)mp3Reader.TotalTime.TotalSeconds;
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine("Error reading MP3 file: " + ex.Message);
                }
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        if (song._duration.HasValue && song._duration > 0)
        {
            await SongService.AddSong(song);
            song = new Song(); // Reset the form after submission
            Navigation.NavigateTo("/main");
        }
        else
        {
            // Handle cases where duration could not be determined
            Console.WriteLine("Failed to determine the duration of the song.");
        }
    }

    private void BackToMain()
    {
        Navigation.NavigateTo("/main");
    }
}

<style>
    .form-control-file {
        display: block;
        width: 100%;
    }

    .btn-outline-secondary {
        margin-bottom: 1rem;
    }
</style>
