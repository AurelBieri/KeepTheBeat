@page "/register"
@inject NavigationManager Navigation
@using Keep_The_Beat.Classes
@using KeepTheBeat.Interfaces;
@using KeepTheBeat.Database.Services
@using KeepTheBeat.Classes;
@inject IUserService userService;

<PageTitle>Register</PageTitle>

<div class="container mt-4">
    <h3>Register</h3>
    <p>Already have an Account? <button class="btn btn-link" @onclick="NavigateToLogin">Sign In</button></p>

    <div class="form-group">
        <label for="Rfirstname">Firstname:</label>
        <input type="text" class="form-control" id="Rfirstname" @bind="Rfirstname" />
        @if (!string.IsNullOrEmpty(validator.FirstnameError))
        {
            <span class="text-danger">@validator.FirstnameError</span>
        }
    </div>
    <div class="form-group">
        <label for="Rlastname">Lastname:</label>
        <input type="text" class="form-control" id="Rlastname" @bind="Rlastname" />
        @if (!string.IsNullOrEmpty(validator.LastnameError))
        {
            <span class="text-danger">@validator.LastnameError</span>
        }
    </div>
    <div class="form-group">
        <label for="Remail">Email:</label>
        <input type="email" class="form-control" id="Remail" @bind="Remail" />
        @if (!string.IsNullOrEmpty(validator.EmailError))
        {
            <span class="text-danger">@validator.EmailError</span>
        }
    </div>
    <div class="form-group">
        <label for="Rbirthday">Birthday:</label>
        <input type="date" class="form-control" id="Rbirthday" @bind="Rbirthday" />
    </div>
    <div class="form-group">
        <label for="Rusername">Username:</label>
        <input type="text" class="form-control" id="Rusername" @bind="Rusername" />
        @if (!string.IsNullOrEmpty(validator.UsernameError))
        {
            <span class="text-danger">@validator.UsernameError</span>
        }
    </div>
    <div class="form-group">
        <label for="Rpassword">Password:</label>
        <input type="password" class="form-control" id="Rpassword" @bind="Rpassword" />
        @if (!string.IsNullOrEmpty(validator.PasswordError))
        {
            <span class="text-danger">@validator.PasswordError</span>
        }
    </div>

    <button class="btn btn-primary" @onclick="register">Register</button>
</div>

@code {
    private string Rusername { get; set; }
    private string Rpassword { get; set; }
    private string Remail { get; set; }
    private string Rfirstname { get; set; }
    private string Rlastname { get; set; }
    private DateTime Rbirthday { get; set; }
    private RegisterValidator validator;

    protected override void OnInitialized()
    {
        validator = new RegisterValidator(userService);
    }

    private async Task register()
    {
        if (await validator.ValidateFieldsAsync(Rfirstname, Rlastname, Rusername, Remail, Rpassword))
        {
            User user = new User(Rusername, Rpassword, Remail, Rfirstname, Rlastname, Rbirthday);
            await userService.AddUser(user);
            NavigateToLogin();
        }
    }

    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/login");
    }
}
